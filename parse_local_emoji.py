import re
import os # For os.path.abspath

# The local filename where the emoji-zwj-sequences.txt file is saved
# Ensure this file is in the same directory as this script, or provide its full path.
LOCAL_EMOJI_FILE = "emoji-zwj-sequences.txt"

# The filename where the generated Python code (with arrays) will be saved
OUTPUT_PYTHON_FILE = "emoji_versions_data.py"

# Desired Unicode Emoji versions (as strings for exact match, e.g., "12.1")
TARGET_VERSIONS_STR = [
    '2.0', '4.0', '12.0', '12.1', '13.0', '13.1',
    '15.0', '15.1', '16.0', '17.0'
]

# Dictionary to store emoji sequences, keyed by full version string
emoji_zwj_sequences_by_version = {v: [] for v in TARGET_VERSIONS_STR}

def parse_local_emoji_data(local_filepath):
    """
    Reads the emoji-zwj-sequences.txt file from a local path and parses its contents.
    Stores each valid sequence (displayable Unicode string) into the
    emoji_zwj_sequences_by_version dictionary.
    Returns True on success, False on failure.
    """
    print(f"Attempting to read data from local file: {local_filepath}")
    
    try:
        with open(local_filepath, 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print(f"Error: The file '{local_filepath}' was not found.")
        print("Please ensure the 'emoji-zwj-sequences.txt' file is in the same directory as this script,")
        print("or update LOCAL_EMOJI_FILE to its correct full path.")
        return False
    except IOError as e:
        print(f"Error reading file '{local_filepath}': {e}")
        return False
    except Exception as e:
        print(f"An unexpected error occurred while opening/reading '{local_filepath}': {e}")
        return False

    print("Parsing emoji sequences...")

    for line_num, line in enumerate(content.splitlines()):
        line = line.strip()

        # Skip comments and empty lines
        if not line or line.startswith('#'):
            continue

        try:
            # Example line format:
            # 1F468 200D 1F469 200D 1F467 ; RGI_Emoji_ZWJ_Sequence # E14.0 woman, man, girl

            # Split by the first semicolon to separate code points from description
            parts = line.split(';', 1)
            if len(parts) < 2:
                continue

            code_points_str, description_str = parts

            # Extract the FULL emoji version from the description (e.g., "12.1", "13.0")
            # Regex to find '# E<version.minor>'
            version_match = re.search(r'# E(\d+\.\d+)', description_str)
            if not version_match:
                continue

            full_emoji_version = version_match.group(1)

            # Only process target versions defined in TARGET_VERSIONS_STR
            if full_emoji_version not in TARGET_VERSIONS_STR:
                continue
            
            # This file should only contain RGI_Emoji_ZWJ_Sequence entries
            if "RGI_Emoji_ZWJ_Sequence" not in description_str:
                continue

            # Split space-separated hex code points
            hex_codes = code_points_str.strip().split(' ')
            
            # Convert each hex string to an integer, then to a Unicode character,
            # and join them to form the displayable emoji string.
            displayable_emoji_string = "".join([chr(int(h, 16)) for h in hex_codes])
            
            # Append the displayable string to the correct version's list
            # Initialize list if version wasn't pre-filled (though it is, for robustness)
            if full_emoji_version not in emoji_zwj_sequences_by_version:
                emoji_zwj_sequences_by_version[full_emoji_version] = []
            emoji_zwj_sequences_by_version[full_emoji_version].append(displayable_emoji_string)

        except ValueError as e:
            print(f"Skipping malformed data in line {line_num+1}: '{line}' - Error: {e}")
        except Exception as e:
            print(f"An unexpected error occurred on line {line_num+1}: '{line}' - Error: {e}")
    
    global_total_sequences = sum(len(seq_list) for seq_list in emoji_zwj_sequences_by_version.values())
    print(f"Parsing complete. Found {global_total_sequences} sequences across versions {TARGET_VERSIONS_STR}.")
    return True

# --- Execute the script ---
if __name__ == "__main__":
    if parse_local_emoji_data(LOCAL_EMOJI_FILE):
        print(f"\n--- Generating Python file '{OUTPUT_PYTHON_FILE}' ---")
        try:
            with open(OUTPUT_PYTHON_FILE, 'w', encoding='utf-8') as outfile:
                outfile.write("# This file was automatically generated by a Python script.\n")
                outfile.write("# It contains lists of Unicode Emoji ZWJ sequences by version.\n")
                outfile.write("# Each element is a displayable Unicode string.\n\n")

                # Sort versions numerically for consistent output
                sorted_versions = sorted(TARGET_VERSIONS_STR, key=lambda v: [int(p) for p in v.split('.')])

                for version in sorted_versions:
                    sequences = emoji_zwj_sequences_by_version.get(version, []) # Use .get for safety
                    # Replace '.' with '_' in variable names because '.' is not valid in Python identifiers
                    var_name = f"emoji_zwj_v{version.replace('.', '_')}" 
                    
                    outfile.write(f"\n# Unicode Emoji Version {version} ({len(sequences)} sequences)\n")
                    # Use repr() to get a string representation of the list, including proper escapes for strings
                    outfile.write(f"{var_name} = {repr(sequences)}\n") 
            
            print(f"\nSuccessfully wrote the Python data to '{OUTPUT_PYTHON_FILE}'")
            print(f"File saved at: {os.path.abspath(OUTPUT_PYTHON_FILE)}")

        except IOError as e:
            print(f"Error writing the output Python file '{OUTPUT_PYTHON_FILE}': {e}")
        except Exception as e:
            print(f"An unexpected error occurred while writing the output file: {e}")
    else:
        print("Failed to parse emoji data from local file. Output Python file not generated.")
